{"ast":null,"code":"import axios from 'axios';\nconst CancelToken = axios.CancelToken;\nexport const source = CancelToken.source();\nconst instance = axios.create({\n  baseURL: 'http://localhost:8001',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true,\n  responseType: \"json\" //   cancelToken: new CancelToken(function executor(c) {\n  //     // An executor function receives a cancel function as a parameter\n  //     cancel = c;\n  //     // if (axios.isCancel(error)) {\n  //     //     console.log('Request canceled', error.message);\n  //     //   }\n  //   })\n\n}); // axios.interceptors.response.use(response => {\n//     return response;\n// }, error => {\n//     try {\n//         if (axios.isCancel(error)) {\n//             return new Promise(() => { });\n//         }\n//         return Promise.reject(error);\n//     } catch (error) {\n//         console.log(error)\n//     }\n// });\n\nexport default instance;","map":{"version":3,"sources":["/Users/sayconfirmproductionsltd/Documents/GitHub/mern-projects/frontend/src/utils/axios.js"],"names":["axios","CancelToken","source","instance","create","baseURL","headers","withCredentials","responseType"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,WAAW,GAAGD,KAAK,CAACC,WAA1B;AACA,OAAO,MAAMC,MAAM,GAAGD,WAAW,CAACC,MAAZ,EAAf;AAEP,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAE,uBADiB;AAE1BC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX,GAFiB;AAK1BC,EAAAA,eAAe,EAAE,IALS;AAM1BC,EAAAA,YAAY,EAAE,MANY,CAO1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAb0B,CAAb,CAAjB,C,CAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeL,QAAf","sourcesContent":["import axios from 'axios';\n\nconst CancelToken = axios.CancelToken;\nexport const source = CancelToken.source();\n\nconst instance = axios.create({\n    baseURL: 'http://localhost:8001',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    withCredentials: true,\n    responseType: \"json\",\n    //   cancelToken: new CancelToken(function executor(c) {\n    //     // An executor function receives a cancel function as a parameter\n    //     cancel = c;\n    //     // if (axios.isCancel(error)) {\n    //     //     console.log('Request canceled', error.message);\n    //     //   }\n    //   })\n\n});\n\n// axios.interceptors.response.use(response => {\n//     return response;\n// }, error => {\n//     try {\n//         if (axios.isCancel(error)) {\n//             return new Promise(() => { });\n//         }\n//         return Promise.reject(error);\n//     } catch (error) {\n//         console.log(error)\n//     }\n// });\n\nexport default instance\n\n"]},"metadata":{},"sourceType":"module"}